---
import { Icon } from 'astro-icon/components';
import Headline from '~/components/blog/Headline.astro';
import Note from '~/components/widgets/Note.astro';
import Steps from '~/components/widgets/Steps.astro';
import Layout from '~/layouts/PageLayout.astro';
import { getPermalink } from '~/utils/permalinks';

const metadata = {
  title: 'Registro',
};
---

<Layout metadata={metadata}>
  <div class="mt-12" />

  <Headline
    title="<h3 class='text-4xl font-bold'>Regístrate ya</h3>"
    subtitle="Las plazas son limitadas, te avisaremos cuando seas aceptado en el hackathon."
  />

  <div class="max-w-xl mx-auto mb-72 -mt-5 text-center p-5 rounded-md bg-orange-100 shadow-sm">
    <p>¡El registro está cerrado!</p>
  </div>

  <Note icon="tabler:shield-heart">
    <Fragment slot="content">
      Puedes leer la <a href={getPermalink("/privacidad")} class="underline">política de privacidad</a> y el <a href={getPermalink("/codigo-conducta")} class="underline">código de conducta</a>.
    </Fragment>
  </Note>
</Layout>


<script>
  const form = document.getElementById("form") as HTMLFormElement;
  const successDiv = document.getElementById("success") as HTMLDivElement;
  const errorDiv = document.getElementById("error") as HTMLDivElement;
  const submitBtn = document.getElementById("submit") as HTMLButtonElement;

  document.getElementById('form')?.addEventListener('submit', function(e) {
    e.preventDefault();

    let isValid = true;

    // Clear previous error indications
    this.querySelectorAll('.border-red-500').forEach(el => {
        el.classList.remove('border-red-500');
    });
    this.querySelectorAll('.text-red-500').forEach(el => {
        el.classList.remove('text-red-500');
    });

    // Validate text inputs, selects and file input
    this.querySelectorAll('input[type="text"], input[type="email"], input[type="number"], select, input[type="file"]').forEach((el: HTMLFormElement) => {
        if (!el.value) {
            el.classList.add('border-red-500');
            isValid = false;
        }
    });

    const conductCheckbox = this.querySelector('#conduct') as HTMLFormElement;
    const studyCheckbox = this.querySelector('#studyCheck') as HTMLFormElement;
    const conductCheckboxText = this.querySelector('#conductText') as HTMLElement;
    const studyCheckboxText = this.querySelector('#studyCheckText') as HTMLElement;

    // Validate checkboxes
    if (!conductCheckbox.checked) {
      conductCheckboxText.classList.add('text-red-500');
      isValid = false;
    }
    if (!studyCheckbox.checked) {
      studyCheckboxText.classList.add('text-red-500');
      isValid = false;
    }

    if (isValid) {
      const formRef = this as HTMLFormElement;
      const formData = new FormData(formRef);

      // Define the URL of your backend endpoint
      const url = 'https://n8n.jorgeteixeira.es/webhook/hackudc-registro';

      // Use fetch to send the formData
      fetch(url, {
          method: 'POST',
          body: formData  // Send the formData directly
      })
      .then(response => {
        if (response.status != 200) {
          throw Error('No se ha podido enviar.')
        }
        return response
      })
      .then(response => response.json())
      .then(data => {
          console.error('Success:', data);
          // Handle success here
          submitBtn.textContent = 'Enviado';
          form.classList.add("hidden");
          successDiv.classList.toggle("hidden");
          successDiv.classList.add("flex");
      })
      .catch((error) => {
          console.error('Error:', error);
          // Handle errors here
          submitBtn.textContent = 'Error';
          form.classList.add("hidden");
          errorDiv.classList.toggle("hidden");
          errorDiv.classList.add("flex");
      });
    }
  });
</script>
